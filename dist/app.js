import{openBlock as e,createElementBlock as t,toDisplayString as r,Fragment as n,createElementVNode as s,withDirectives as l,vModelText as o}from"vue";var a=(e,t)=>{const r=e.__vccOpts||e;for(const[e,n]of t)r[e]=n;return r};function i(e){if(isNaN(e))return"Invalid Input";var t="",r=!1;if(e>=48?(r=!0,t=Math.floor(e/24)+" days",(e=Math.floor(e%24))>0&&(t+=" ")):e>=24&&(r=!0,t=Math.floor(e/24)+" day",(e=Math.floor(e%24))>0&&(t+=" ")),e>0||r){var n=!1;e>=1&&e<2?(t+=Math.floor(e)+" h",n=!0):e>=2&&(t+=Math.floor(e)+" hrs",n=!0);var s=60*(e-Math.floor(e));1==s?(n&&(t+=" "),t+=Math.round(s)+" min"):s>1&&(n&&(t+=" "),t+=Math.round(s)+" mins")}else t="Negative Input";return t}var u={id:"walk-time-display",name:"Display walk times",icon:"schedule",description:"Converts a given Array or JSON of hours into days, hours, and minutes which is displayed.",component:a({props:{value:{type:Array,default:null}},setup:e=>function(){var t=[];e.value.forEach((e=>{t.push(e)}));for(var r=0;r<t.length;r++)t[r]=parseFloat(t[r]);var n="";for(r=0;r<t.length;r++)r==t.length-1&&t.length>1?n+=" to ":t.length>2&&0!=r&&(n+=", "),n+=i(t[r]);return n}},[["render",function(n,s,l,o,a,i){return e(),t("div",null,r(n.createDisplayString()),1)}],["__file","display.vue"]]),options:null,types:["array","json"]},d=[],c=[];!function(e,t){if(e&&"undefined"!=typeof document){var r,n=!0===t.prepend?"prepend":"append",s=!0===t.singleTag,l="string"==typeof t.container?document.querySelector(t.container):document.getElementsByTagName("head")[0];if(s){var o=d.indexOf(l);-1===o&&(o=d.push(l)-1,c[o]={}),r=c[o]&&c[o][n]?c[o][n]:c[o][n]=a()}else r=a();65279===e.charCodeAt(0)&&(e=e.substring(1)),r.styleSheet?r.styleSheet.cssText+=e:r.appendChild(document.createTextNode(e))}function a(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),t.attributes)for(var r=Object.keys(t.attributes),s=0;s<r.length;s++)e.setAttribute(r[s],t.attributes[r[s]]);var o="prepend"===n?"afterbegin":"beforeend";return l.insertAdjacentElement(o,e),e}}('\n.time-form {\r\n\t\t\tflex-direction: row;\r\n\t\t\tdisplay: flex;\r\n            align-items: center;\r\n         padding: 10px;\n}\n.time-form input[type="number"] {\r\n            width: 40px;\r\n          text-align: right;\n}\n.time-form label {\r\n            margin-left: 2px;\r\n            margin-right: 10px;\n}\n.time-form button[type="submit"] {\r\n            background-color: green;\r\n            color: white;\r\n            padding: 8px 12px;\r\n            border: none;\r\n            cursor: pointer;\r\n            border-radius: 6px;\n}\n.time-form button[type="submit"]:hover {\r\n            background-color: darkgreen;\n}\n.time-form button[type="reset"] {\r\n\t\t\tbackground-color: rgba(255, 0, 0, 0.85);\r\n\t\t\tcolor: white;\r\n\t\t\tpadding: 8px 12px;\r\n\t\t\tborder: none;\r\n\t\t\tcursor: pointer;\r\n\t\t\tborder-radius: 6px;\n}\n.time-form button[type="reset"]:hover {\r\n\t\t\tbackground-color: darkred;\n}\r\n',{});const h={props:{value:{type:Array,default:["0"]}},data:()=>({selectedMinutes:null,selectedHours:null,selectedDays:null,draggedTile:null,localHoursArray:[]}),emits:["input"],methods:{handleChange(e,t){0==t?this.selectedMinutes=e:1==t?this.selectedHours=e:2==t&&(this.selectedDays=e)},displayTime(){0==this.localHoursArray.length&&null!=this.$props.value&&(this.localHoursArray=[],Object.values(this.$props.value).forEach((e=>{this.localHoursArray.push(e)})),this.localHoursArray.sort(((e,t)=>e-t)));for(var e="",t=0;t<this.localHoursArray.length;t++)t==this.localHoursArray.length-1&&this.localHoursArray.length>1?e+=" to ":this.localHoursArray.length>2&&0!=t&&(e+=", "),e+=p(this.localHoursArray[t]);return e},calculateTime(){var e=0;return null!=this.selectedMinutes&&(e+=parseFloat(this.selectedMinutes)/60),null!=this.selectedHours&&(e+=parseFloat(this.selectedHours)),null!=this.selectedDays&&(e+=24*parseFloat(this.selectedDays)),0==e?"0":(this.localHoursArray.push(e),this.localHoursArray.sort(((e,t)=>e-t)),e)},addTime(){this.calculateTime(),this.localHoursArray,this.$emit("input",this.localHoursArray),this.clearSelections()},clearSelections(){this.selectedMinutes=null,this.selectedHours=null,this.selectedDays=null},reset(){this.clearSelections(),this.localHoursArray=[0],this.$emit("input",null),this.localHoursArray=[]}}};function p(e){var t="",r=!1;if(e>=48?(r=!0,t=Math.floor(e/24)+" days",(e%=24)>0&&(t+=" ")):e>=24&&(r=!0,t=Math.floor(e/24)+" day",(e=Math.floor(e%24))>0&&(t+=" ")),e>0||r){var n=!1;e>=1&&e<2?(t+=Math.floor(e)+" h",n=!0):e>=2&&(t+=Math.floor(e)+" hrs",n=!0);var s=60*(e-Math.floor(e));1==s?(n&&(t+=" "),t+=Math.round(s)+" min"):s>1&&(n&&(t+=" "),t+=Math.round(s)+" mins")}else t="Negative Input";return t}const m={class:"time-form"},y=s("label",{for:"days"},"Days",-1),f=s("label",{for:"hrs"},"Hrs",-1),g=s("label",{for:"mins"},"Mins",-1);const b=[{id:"walkTimeInterface",name:"Walk Time Interface",icon:"box",description:"Input mins, hours, days, Outputs times in human readable format, returns Array with all times in hours",component:a(h,[["render",function(a,i,u,d,c,h){return e(),t(n,null,[s("p",null,"Total Time: "+r(h.displayTime()),1),s("form",m,[l(s("input",{"onUpdate:modelValue":i[0]||(i[0]=e=>c.selectedDays=e),type:"number",id:"days",name:"days",min:"0",required:""},null,512),[[o,c.selectedDays]]),y,l(s("input",{"onUpdate:modelValue":i[1]||(i[1]=e=>c.selectedHours=e),type:"number",id:"hrs",name:"hrs",min:"0",max:"24",required:""},null,512),[[o,c.selectedHours]]),f,l(s("input",{"onUpdate:modelValue":i[2]||(i[2]=e=>c.selectedMinutes=e),type:"number",id:"mins",name:"mins",min:"0",max:"60",required:""},null,512),[[o,c.selectedMinutes]]),g,s("button",{type:"submit",onClick:i[3]||(i[3]=(...e)=>h.addTime&&h.addTime(...e))},"Add"),s("button",{type:"reset",onClick:i[4]||(i[4]=(...e)=>h.reset&&h.reset(...e))},"Reset")])],64)}],["__file","interface.vue"]]),options:null,types:["json"]}],v=[u],A=[],M=[],H=[],x=[],T=[];export{v as displays,b as interfaces,A as layouts,M as modules,T as operations,H as panels,x as themes};
